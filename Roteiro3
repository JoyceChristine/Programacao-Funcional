--Joyce Christine F Freire 11721BCC026

--Exercicio 1
main :: IO()
main = return ()

(||) :: Bool -> Bool -> Bool
True  || True  = True
False || True  = True
True  || False = True
False || False = False

(||) :: Bool -> Bool -> Bool
True || _    = True
_    || True = True
_    || _    = False

(||) :: Bool -> Bool -> Bool
True  || _ = True
False || y = y

--b
--Exercicio 2

type Dist = (Float, Float)

distancia :: Dist -> Dist -> Float
distancia  (x2, x1) (y2, y1) = sqrt ( (x2 - x1) ^ 2 + (y2 - y1) ^ 2 )

--Exercicio 3
{--
-- 1:[2,3,4] = [1,2,3,4]
-- 'a':['b','c','d'] = "abcd"
-- head [1,2,3] = 1
-- tail [1,2,3] = [2,3]
-- [1,5,2,3]!!1 = 5
-- [1,5,2,3]!!3 = 3
-- elem 2 [1,5,2,3] = True
-- take 2 [1,5,2,3,7] = [1,5] 
-- drop 2 [1,5,2,3,7] = [2,3,7]
-- [1,2] ++ [3,4] = [1,2,3,4]
-- [1..10] = [1,2,3,4,5,6,7,8,9,10]
-- [7,6..3] = [7,6,5,4,3]
-- ['b'..'g'] = "bcdefg"
-- take 5 [1,3..] = [1,3,5,7,9]
-- sum [1..10] = 55
-- maximum [1,5,2,3,7] = 7
-- minimum [1,5,2,3,7] = 1
--}

--Exercicio 4 

--Usando Guardas
fatorial :: Int -> Int
fatorial n 
  |n == 0 = 1
  |n > 0 = n * fatorial (n-1)

--Usando Casamento de PadrÃµes
fatorial1 :: Int -> Int
fatorial1 0 = 1
fatorial1 n = n * fatorial1 (n-1)

--Exercicio 5

fibo :: Int -> Int

fibo 1 = 1
fibo 2 = 1
fibo n = fibo (n-2) + fibo (n-1)

--Exercicio 6

--Exercicio 7

--Exercicio 8

--Exercicio 9

--Exercicio 10

--Exercicio 11

--Exercicio 12




